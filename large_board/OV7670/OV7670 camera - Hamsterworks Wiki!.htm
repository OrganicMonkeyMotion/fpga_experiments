<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0074)http://hamsterworks.co.nz/mediawiki/index.php/OV7670_camera#ov7670_top.vhd -->
<html lang="en" dir="ltr"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>OV7670 camera - Hamsterworks Wiki!</title>

<meta name="generator" content="MediaWiki 1.16.2">
<link rel="shortcut icon" href="http://hamsterworks.co.nz/favicon.ico">
<link rel="search" type="application/opensearchdescription+xml" href="http://hamsterworks.co.nz/mediawiki/opensearch_desc.php" title="Hamsterworks Wiki! (en)">
<link rel="alternate" type="application/atom+xml" title="Hamsterworks Wiki! Atom feed" href="http://hamsterworks.co.nz/mediawiki/index.php?title=Special:RecentChanges&feed=atom">
<link rel="stylesheet" href="http://hamsterworks.co.nz/mediawiki/skins/common/shared.css?270" media="screen">
<link rel="stylesheet" href="http://hamsterworks.co.nz/mediawiki/skins/common/commonPrint.css?270" media="print">
<link rel="stylesheet" href="http://hamsterworks.co.nz/mediawiki/skins/monobook/main.css?270" media="screen">
<!--[if lt IE 5.5000]><link rel="stylesheet" href="/mediawiki/skins/monobook/IE50Fixes.css?270" media="screen" /><![endif]-->
<!--[if IE 5.5000]><link rel="stylesheet" href="/mediawiki/skins/monobook/IE55Fixes.css?270" media="screen" /><![endif]-->
<!--[if IE 6]><link rel="stylesheet" href="/mediawiki/skins/monobook/IE60Fixes.css?270" media="screen" /><![endif]-->
<!--[if IE 7]><link rel="stylesheet" href="/mediawiki/skins/monobook/IE70Fixes.css?270" media="screen" /><![endif]-->
<link rel="stylesheet" href="http://hamsterworks.co.nz/mediawiki/index.php?title=MediaWiki:Common.css&usemsgcache=yes&ctype=text%2Fcss&smaxage=18000&action=raw&maxage=18000">
<link rel="stylesheet" href="http://hamsterworks.co.nz/mediawiki/index.php?title=MediaWiki:Print.css&usemsgcache=yes&ctype=text%2Fcss&smaxage=18000&action=raw&maxage=18000" media="print">
<link rel="stylesheet" href="http://hamsterworks.co.nz/mediawiki/index.php?title=MediaWiki:Monobook.css&usemsgcache=yes&ctype=text%2Fcss&smaxage=18000&action=raw&maxage=18000">
<link rel="stylesheet" href="http://hamsterworks.co.nz/mediawiki/index.php?title=-&action=raw&maxage=18000&gen=css">
<script>
var skin="monobook",
stylepath="/mediawiki/skins",
wgUrlProtocols="http\\:\\/\\/|https\\:\\/\\/|ftp\\:\\/\\/|irc\\:\\/\\/|gopher\\:\\/\\/|telnet\\:\\/\\/|nntp\\:\\/\\/|worldwind\\:\\/\\/|mailto\\:|news\\:|svn\\:\\/\\/",
wgArticlePath="/mediawiki/index.php/$1",
wgScriptPath="/mediawiki",
wgScriptExtension=".php",
wgScript="/mediawiki/index.php",
wgVariantArticlePath=false,
wgActionPaths={},
wgServer="http://hamsterworks.co.nz",
wgCanonicalNamespace="",
wgCanonicalSpecialPageName=false,
wgNamespaceNumber=0,
wgPageName="OV7670_camera",
wgTitle="OV7670 camera",
wgAction="view",
wgArticleId=395,
wgIsArticle=true,
wgUserName=null,
wgUserGroups=null,
wgUserLanguage="en",
wgContentLanguage="en",
wgBreakFrames=false,
wgCurRevisionId=3610,
wgVersion="1.16.2",
wgEnableAPI=true,
wgEnableWriteAPI=true,
wgSeparatorTransformTable=["", ""],
wgDigitTransformTable=["", ""],
wgMainPageTitle="Main Page",
wgFormattedNamespaces={"-2": "Media", "-1": "Special", "0": "", "1": "Talk", "2": "User", "3": "User talk", "4": "Hamsterworks Wiki!", "5": "Hamsterworks Wiki! talk", "6": "File", "7": "File talk", "8": "MediaWiki", "9": "MediaWiki talk", "10": "Template", "11": "Template talk", "12": "Help", "13": "Help talk", "14": "Category", "15": "Category talk"},
wgNamespaceIds={"media": -2, "special": -1, "": 0, "talk": 1, "user": 2, "user_talk": 3, "hamsterworks_wiki!": 4, "hamsterworks_wiki!_talk": 5, "file": 6, "file_talk": 7, "mediawiki": 8, "mediawiki_talk": 9, "template": 10, "template_talk": 11, "help": 12, "help_talk": 13, "category": 14, "category_talk": 15, "image": 6, "image_talk": 7},
wgSiteName="Hamsterworks Wiki!",
wgCategories=[],
wgRestrictionEdit=[],
wgRestrictionMove=[];
</script><script src="./OV7670 camera - Hamsterworks Wiki!_files/wikibits.js"></script>
<script src="./OV7670 camera - Hamsterworks Wiki!_files/ajax.js"></script>
<script src="./OV7670 camera - Hamsterworks Wiki!_files/index.php"></script>

</head>
<body class="mediawiki ltr ns-0 ns-subject page-OV7670_camera skin-monobook">
<div id="globalWrapper">
<div id="column-content"><div id="content">
	<a id="top"></a>
	
	<h1 id="firstHeading" class="firstHeading">OV7670 camera</h1>
	<div id="bodyContent">
		<h3 id="siteSub">From Hamsterworks Wiki!</h3>
		<div id="contentSub"></div>
		<div id="jump-to-nav">Jump to: <a href="http://hamsterworks.co.nz/mediawiki/index.php/OV7670_camera#column-one">navigation</a>, <a href="http://hamsterworks.co.nz/mediawiki/index.php/OV7670_camera#searchInput">search</a></div>
		<!-- start content -->
<p>This <a href="http://hamsterworks.co.nz/mediawiki/index.php/FPGA_Projects" title="FPGA Projects">FPGA project</a> was started in November 2012.
</p><p>I've got an <a href="http://dx.com/p/ov7670-300kp-vga-camera-module-for-arduino-147742" class="external text" rel="nofollow">inexpensive camera module</a> that I have mostly working with an FPGA. It might prove useful to anybody who wants to play with real time image processing. This is very much based on a design by Voelker - more details of his design can be found <a href="http://www.gadgetfactory.net/2012/03/10-vga-camera-on-the-papilio-one-how-about-a-free-pcb-to-try-it-yourself/" class="external text" rel="nofollow">here</a>.
</p><p><a href="http://hamsterworks.co.nz/mediawiki/index.php/File:Camera_design.png" class="image"><img alt="Camera design.png" src="./OV7670 camera - Hamsterworks Wiki!_files/Camera_design.png" width="732" height="484"></a>
</p><p>Due to the resources in the FPGA, and the 6-bit "RGB 3-3-2" VGA interface on the development board it only holds a 160x120 frame. Next step might be to move the frame buffer into DRAM. 
</p><p>And here is a screen shot showing just how close if can focus:
</p><p><a href="http://hamsterworks.co.nz/mediawiki/index.php/File:Camera_result.png" class="image"><img alt="Camera result.png" src="./OV7670 camera - Hamsterworks Wiki!_files/Camera_result.png" width="272" height="204"></a>
</p><p><b>NOTE: Please look at <a href="http://hamsterworks.co.nz/mediawiki/index.php/Zedboard_OV7670" title="Zedboard OV7670">Zedboard_OV7670</a> for an updated register set with better colour and contrast</b>
</p>
<table id="toc" class="toc"><tbody><tr><td><div id="toctitle"><h2>Contents</h2> <span class="toctoggle">[<a id="togglelink" class="internal" href="javascript:toggleToc()">hide</a>]</span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="http://hamsterworks.co.nz/mediawiki/index.php/OV7670_camera#The_camera.27s_interface"><span class="tocnumber">1</span> <span class="toctext">The camera's interface</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="http://hamsterworks.co.nz/mediawiki/index.php/OV7670_camera#Source"><span class="tocnumber">2</span> <span class="toctext">Source</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="./OV7670 camera - Hamsterworks Wiki!_files/OV7670 camera - Hamsterworks Wiki!.htm"><span class="tocnumber">2.1</span> <span class="toctext">ov7670_top.vhd</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="http://hamsterworks.co.nz/mediawiki/index.php/OV7670_camera#debounce.vhd"><span class="tocnumber">2.2</span> <span class="toctext">debounce.vhd</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="http://hamsterworks.co.nz/mediawiki/index.php/OV7670_camera#ov7670_capture.vhd"><span class="tocnumber">2.3</span> <span class="toctext">ov7670_capture.vhd</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="http://hamsterworks.co.nz/mediawiki/index.php/OV7670_camera#ov7670_controller.vhd"><span class="tocnumber">2.4</span> <span class="toctext">ov7670_controller.vhd</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="http://hamsterworks.co.nz/mediawiki/index.php/OV7670_camera#ov7670_registers.vhd"><span class="tocnumber">2.5</span> <span class="toctext">ov7670_registers.vhd</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="http://hamsterworks.co.nz/mediawiki/index.php/OV7670_camera#i2c_sender.vhd"><span class="tocnumber">2.6</span> <span class="toctext">i2c_sender.vhd</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="http://hamsterworks.co.nz/mediawiki/index.php/OV7670_camera#vga.vhd"><span class="tocnumber">2.7</span> <span class="toctext">vga.vhd</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="http://hamsterworks.co.nz/mediawiki/index.php/OV7670_camera#nexys2.ucf"><span class="tocnumber">2.8</span> <span class="toctext">nexys2.ucf</span></a></li>
<li class="toclevel-2 tocsection-11"><a href="http://hamsterworks.co.nz/mediawiki/index.php/OV7670_camera#ov7670_capture.vhd_-_Version_2.0"><span class="tocnumber">2.9</span> <span class="toctext">ov7670_capture.vhd - Version 2.0</span></a></li>
</ul>
</li>
</ul>
</td></tr></tbody></table><script>if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } </script>
<h2> <span class="mw-headline" id="The_camera.27s_interface"> The camera's interface </span></h2>
<div class="floatleft"><a href="http://hamsterworks.co.nz/mediawiki/index.php/File:Camera_interface.png" class="image"><img alt="Camera interface.png" src="./OV7670 camera - Hamsterworks Wiki!_files/Camera_interface.png" width="240" height="320"></a></div>
<p>Full specs are in the <a href="http://www.cutedigi.com/pub/sensor/Imaging/OV7670-Datasheet.pdf" class="external text" rel="nofollow">datasheet</a> and in the <a href="http://www.haoyuelectronics.com/Attachment/OV7670%20+%20AL422B(FIFO)%20Camera%20Module(V2.0)/OV7670%20Implementation%20Guide%20(V1.0).pdf" class="external text" rel="nofollow">implmentation guide</a>
</p>
<table border="1">
<tbody><tr>
<th> Signal </th><th> Usage </th><th> Active
</th></tr>
<tr>
<td> 3V3 </td><td> 3.3V power </td><td>
</td></tr>
<tr>
<td> Gnd </td><td> Ground </td><td>
</td></tr>
<tr>
<td> SIOC </td><td> Serial command bus clock (up to 400KHz) </td><td>
</td></tr>
<tr>
<td> SIOD </td><td> Serial command bus data </td><td>
</td></tr>
<tr>
<td> VSYNC </td><td> Vertical Sync </td><td> Active High, configurable
</td></tr>
<tr>
<td> HREF  </td><td> CE output for pixel sampling </td><td> Active High, configurable
</td></tr>
<tr>
<td> PCLK  </td><td> Pixel Clock </td><td>
</td></tr>
<tr>
<td> XCLK  </td><td> System clock (10-48MHz, 24MHz Typ) </td><td>
</td></tr>
<tr>
<td> D0-D7 </td><td> Pixel data </td><td>
</td></tr>
<tr>
<td> RESET </td><td> Device Reset </td><td> Active Low
</td></tr>
<tr>
<td> PWDN  </td><td> Device Power Down </td><td> Active High
</td></tr></tbody></table>
<h2> <span class="mw-headline" id="Source"> Source </span></h2>
<p>Here are all the sources for all the components, except the block of memory where I've used an IP Block Memory Generator.
</p><p>There is plenty of tuning options for the camera.
</p>
<h3> <span class="mw-headline" id="ov7670_top.vhd"> ov7670_top.vhd </span></h3>
<pre>----------------------------------------------------------------------------------
-- Engineer: Mike Field &lt;hamster@snap.net.nz&gt;
-- 
-- Description: Top level for the OV7670 camera project.
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity ov7670_top is
    Port ( 
      clk50        : in    STD_LOGIC;
      OV7670_SIOC  : out   STD_LOGIC;
      OV7670_SIOD  : inout STD_LOGIC;
      OV7670_RESET : out   STD_LOGIC;
      OV7670_PWDN  : out   STD_LOGIC;
      OV7670_VSYNC : in    STD_LOGIC;
      OV7670_HREF  : in    STD_LOGIC;
      OV7670_PCLK  : in    STD_LOGIC;
      OV7670_XCLK  : out   STD_LOGIC;
      OV7670_D     : in    STD_LOGIC_VECTOR(7 downto 0);

      LED          : out    STD_LOGIC_VECTOR(7 downto 0);

      vga_red      : out   STD_LOGIC_VECTOR(2 downto 0);
      vga_green    : out   STD_LOGIC_VECTOR(2 downto 0);
      vga_blue     : out   STD_LOGIC_VECTOR(2 downto 1);
      vga_hsync    : out   STD_LOGIC;
      vga_vsync    : out   STD_LOGIC;
      
      btn           : in    STD_LOGIC
    );
end ov7670_top;

architecture Behavioral of ov7670_top is

   COMPONENT debounce
   PORT(
      clk : IN std_logic;
      i : IN std_logic;          
      o : OUT std_logic
      );
   END COMPONENT;

   COMPONENT ov7670_controller
   PORT(
      clk   : IN    std_logic;    
      resend: IN    std_logic;    
      config_finished : out std_logic;
      siod  : INOUT std_logic;      
      sioc  : OUT   std_logic;
      reset : OUT   std_logic;
      pwdn  : OUT   std_logic;
      xclk  : OUT   std_logic
      );
   END COMPONENT;

   COMPONENT frame_buffer
   PORT (
      clka  : IN  STD_LOGIC;
      wea   : IN  STD_LOGIC_VECTOR(0 DOWNTO 0);
      addra : IN  STD_LOGIC_VECTOR(14 DOWNTO 0);
      dina  : IN  STD_LOGIC_VECTOR(7 DOWNTO 0);
      clkb  : IN  STD_LOGIC;
      addrb : IN  STD_LOGIC_VECTOR(14 DOWNTO 0);
      doutb : OUT STD_LOGIC_VECTOR(7 DOWNTO 0)
   );
   END COMPONENT;

   COMPONENT ov7670_capture
   PORT(
      pclk : IN std_logic;
      vsync : IN std_logic;
      href  : IN std_logic;
      d     : IN std_logic_vector(7 downto 0);          
      addr  : OUT std_logic_vector(14 downto 0);
      dout  : OUT std_logic_vector(7 downto 0);
      we    : OUT std_logic
      );
   END COMPONENT;


   COMPONENT vga
   PORT(
      clk50 : IN std_logic;
      vga_red : OUT std_logic_vector(2 downto 0);
      vga_green : OUT std_logic_vector(2 downto 0);
      vga_blue : OUT std_logic_vector(2 downto 1);
      vga_hsync : OUT std_logic;
      vga_vsync : OUT std_logic;
      
      frame_addr : OUT std_logic_vector(14 downto 0);
      frame_pixel : IN std_logic_vector(7 downto 0)         
      );
   END COMPONENT;
   
   signal frame_addr  : std_logic_vector(14 downto 0);
   signal frame_pixel : std_logic_vector(7 downto 0);

   signal capture_addr  : std_logic_vector(14 downto 0);
   signal capture_data  : std_logic_vector(7 downto 0);
   signal capture_we    : std_logic_vector(0 downto 0);
   signal resend : std_logic;
   signal config_finished : std_logic;

begin
btn_debounce: debounce PORT MAP(
      clk =&gt; clk50,
      i   =&gt; btn,
      o   =&gt; resend
   );

   Inst_vga: vga PORT MAP(
      clk50       =&gt; clk50,
      vga_red     =&gt; vga_red,
      vga_green   =&gt; vga_green,
      vga_blue    =&gt; vga_blue,
      vga_hsync   =&gt; vga_hsync,
      vga_vsync   =&gt; vga_vsync,
      frame_addr  =&gt; frame_addr,
      frame_pixel =&gt; frame_pixel
   );

fb : frame_buffer
  PORT MAP (
    clka  =&gt; OV7670_PCLK,
    wea   =&gt; capture_we,
    addra =&gt; capture_addr,
    dina  =&gt; capture_data,
    
    clkb  =&gt; clk50,
    addrb =&gt; frame_addr,
    doutb =&gt; frame_pixel
  );
  led &lt;= "0000000" &amp; config_finished;
  
capture: ov7670_capture PORT MAP(
      pclk  =&gt; OV7670_PCLK,
      vsync =&gt; OV7670_VSYNC,
      href  =&gt; OV7670_HREF,
      d     =&gt; OV7670_D,
      addr  =&gt; capture_addr,
      dout  =&gt; capture_data,
      we    =&gt; capture_we(0)
   );
  
controller: ov7670_controller PORT MAP(
      clk   =&gt; clk50,
      sioc  =&gt; ov7670_sioc,
      resend =&gt; resend,
      config_finished =&gt; config_finished,
      siod  =&gt; ov7670_siod,
      pwdn  =&gt; OV7670_PWDN,
      reset =&gt; OV7670_RESET,
      xclk  =&gt; OV7670_XCLK
   );
end Behavioral;

</pre>
<h3> <span class="mw-headline" id="debounce.vhd"> debounce.vhd </span></h3>
<pre>----------------------------------------------------------------------------------
-- Engineer: Mike Field &lt;hamster@snap.net.nz&gt;
-- 
-- Description: Convert the push button to a 1PPS that can be used to restart
--              camera initialisation
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity debounce is
    Port ( clk : in  STD_LOGIC;
           i : in  STD_LOGIC;
           o : out  STD_LOGIC);
end debounce;

architecture Behavioral of debounce is
   signal c : unsigned(23 downto 0);
begin
   process(clk)
   begin
      if rising_edge(clk) then
         if i = '1' then
            if c = x"FFFFFF" then
               o &lt;= '1';
            else
               o &lt;= '0';
            end if;
            c &lt;= c+1;
         else
            c &lt;= (others =&gt; '0');
            o &lt;= '0';
         end if;
      end if;
   end process;
end Behavioral;

</pre>
<h3> <span class="mw-headline" id="ov7670_capture.vhd"> ov7670_capture.vhd </span></h3>
<pre>----------------------------------------------------------------------------------
-- Engineer: Mike Field &lt;hamster@snap.net.nz&gt;
-- 
-- Description: Captures the pixels coming from the OV760 camera and 
--              Stores them in block RAM
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity ov7670_capture is
    Port ( pclk  : in   STD_LOGIC;
           vsync : in   STD_LOGIC;
           href  : in   STD_LOGIC;
           d     : in   STD_LOGIC_VECTOR (7 downto 0);
           addr  : out  STD_LOGIC_VECTOR (14 downto 0);
           dout  : out  STD_LOGIC_VECTOR (7 downto 0);
           we    : out  STD_LOGIC);
end ov7670_capture;

architecture Behavioral of ov7670_capture is
   signal d_latch    : std_logic_vector(7 downto 0)  := (others =&gt; '0');
   signal href_last  : std_logic;
   signal cnt        : std_logic_vector(1 downto 0)  := (others =&gt; '0');
   signal hold_red   : std_logic_vector(2 downto 0)  := (others =&gt; '0');
   signal hold_green : std_logic_vector(2 downto 0)  := (others =&gt; '0');
   signal address    : STD_LOGIC_VECTOR(14 downto 0) := (others =&gt; '0');
   
begin
   addr &lt;= address;
   process(pclk)
   begin
      if rising_edge(pclk) then
         we   &lt;= '0';
         if vsync = '1' then 
            address &lt;= (others =&gt; '1');
            href_last &lt;= '0';
            cnt &lt;= "00";
         else       
            if href_last = '1' and address /= "100101011111111" then
               if cnt = "11"  then
                 address &lt;= std_logic_vector(unsigned(address)+1);
               end if;
               if cnt = "01" then
                  we   &lt;='1';
               end if;
               cnt &lt;= std_logic_vector(unsigned(cnt)+1);
            end if;
         end if;
         
         dout &lt;= hold_red &amp; hold_green &amp; d_latch(4 downto 3); -- d(4:3) is blue;         

         hold_green   &lt;= d_latch(7 downto 5);  
         hold_red &lt;= d_latch(2 downto 0);
         d_latch &lt;= d;
         
         href_last &lt;= href;
      end if;
   end process;
end Behavioral;

</pre>
<h3> <span class="mw-headline" id="ov7670_controller.vhd"> ov7670_controller.vhd </span></h3>
<p>This module joins the I2C transmitter to a memory containing preset values to load into the camera's internal registers.
</p>
<pre>----------------------------------------------------------------------------------
-- Engineer: Mike Field &lt;hamster@snap.net.nz&gt;
-- 
-- Description: Controller for the OV760 camera - transferes registers to the 
--              camera over an I2C like bus
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity ov7670_controller is
    Port ( clk   : in    STD_LOGIC;
           resend :in    STD_LOGIC;
	      config_finished : out std_logic;
           sioc  : out   STD_LOGIC;
           siod  : inout STD_LOGIC;
           reset : out   STD_LOGIC;
           pwdn  : out   STD_LOGIC;
           xclk  : out   STD_LOGIC
);
end ov7670_controller;

architecture Behavioral of ov7670_controller is
   COMPONENT ov7670_registers
   PORT(
      clk      : IN std_logic;
      advance  : IN std_logic;          
      resend   : in STD_LOGIC;
      command  : OUT std_logic_vector(15 downto 0);
      finished : OUT std_logic
      );
   END COMPONENT;

   COMPONENT i2c_sender
   PORT(
      clk   : IN std_logic;
      send  : IN std_logic;
      taken : out std_logic;
      id    : IN std_logic_vector(7 downto 0);
      reg   : IN std_logic_vector(7 downto 0);
      value : IN std_logic_vector(7 downto 0);    
      siod  : INOUT std_logic;      
      sioc  : OUT std_logic
      );
   END COMPONENT;

   signal sys_clk  : std_logic := '0';   
   signal command  : std_logic_vector(15 downto 0);
   signal finished : std_logic := '0';
   signal taken    : std_logic := '0';
   signal send     : std_logic;

   constant camera_address : std_logic_vector(7 downto 0) := x"42"; -- 42"; -- Device write ID - see top of page 11 of data sheet
begin
   config_finished &lt;= finished;
   
   send &lt;= not finished;
   Inst_i2c_sender: i2c_sender PORT MAP(
      clk   =&gt; clk,
      taken =&gt; taken,
      siod  =&gt; siod,
      sioc  =&gt; sioc,
      send  =&gt; send,
      id    =&gt; camera_address,
      reg   =&gt; command(15 downto 8),
      value =&gt; command(7 downto 0)
   );

   reset &lt;= '1';                   -- Normal mode
   pwdn  &lt;= '0';                   -- Power device up
   xclk  &lt;= sys_clk;
   
   Inst_ov7670_registers: ov7670_registers PORT MAP(
      clk      =&gt; clk,
      advance  =&gt; taken,
      command  =&gt; command,
      finished =&gt; finished,
      resend   =&gt; resend
   );

   process(clk)
   begin
      if rising_edge(clk) then
         sys_clk &lt;= not sys_clk;
      end if;
   end process;
end Behavioral;

</pre>
<h3> <span class="mw-headline" id="ov7670_registers.vhd"> ov7670_registers.vhd </span></h3>
<p>This would most probably be better implemented using a block RAM, but it just an awkward size.
</p><p><b>NOTE: Please look at <a href="http://hamsterworks.co.nz/mediawiki/index.php/Zedboard_OV7670" title="Zedboard OV7670">Zedboard_OV7670</a> for an updated register set with better colour and contrast</b>
</p>
<pre>----------------------------------------------------------------------------------
-- Company: 
-- Engineer: Mike Field &lt;hamster@sanp.net.nz&gt; 
-- 
-- Description: Register settings for the OV7670 Caamera (partially from OV7670.c
--              in the Linux Kernel
------------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity ov7670_registers is
    Port ( clk      : in  STD_LOGIC;
           resend   : in  STD_LOGIC;
           advance  : in  STD_LOGIC;
           command  : out  std_logic_vector(15 downto 0);
           finished : out  STD_LOGIC);
end ov7670_registers;

architecture Behavioral of ov7670_registers is
   signal sreg   : std_logic_vector(15 downto 0);
   signal address : std_logic_vector(7 downto 0) := (others =&gt; '0');
begin
   command &lt;= sreg;
   with sreg select finished  &lt;= '1' when x"FFFF", '0' when others;
   
   process(clk)
   begin
      if rising_edge(clk) then
         if resend = '1' then 
            address &lt;= (others =&gt; '0');
         elsif advance = '1' then
            address &lt;= std_logic_vector(unsigned(address)+1);
         end if;

         case address is
            when x"00" =&gt; sreg &lt;= x"1280"; -- COM7   Reset
            when x"01" =&gt; sreg &lt;= x"1280"; -- COM7   Reset
            when x"02" =&gt; sreg &lt;= x"1100"; -- CLKRC  Prescaler - Fin/(1+1)
            when x"03" =&gt; sreg &lt;= x"1204"; -- COM7   QIF + RGB output
            when x"04" =&gt; sreg &lt;= x"0C04"; -- COM3  Lots of stuff, enable scaling, all others off
            when x"05" =&gt; sreg &lt;= x"3E19"; -- COM14  PCLK scaling = 0
            
             when x"06" =&gt; sreg &lt;= x"4010"; -- COM15  Full 0-255 output, RGB 565
            when x"07" =&gt; sreg &lt;= x"3a04"; -- TSLB   Set UV ordering,  do not auto-reset window
            when x"08" =&gt; sreg &lt;= x"8C00"; -- RGB444 Set RGB format
            
            when x"09" =&gt; sreg &lt;= x"1714"; -- HSTART HREF start (high 8 bits)
            when x"0a" =&gt; sreg &lt;= x"1802"; -- HSTOP  HREF stop (high 8 bits)
            when x"0b" =&gt; sreg &lt;= x"32A4"; -- HREF   Edge offset and low 3 bits of HSTART and HSTOP
            when x"0c" =&gt; sreg &lt;= x"1903"; -- VSTART VSYNC start (high 8 bits)
            when x"0d" =&gt; sreg &lt;= x"1A7b"; -- VSTOP  VSYNC stop (high 8 bits) 
            when x"0e" =&gt; sreg &lt;= x"030a"; -- VREF   VSYNC low two bits
            
            when x"0f" =&gt; sreg &lt;= x"703a"; -- SCALING_XSC
            when x"10" =&gt; sreg &lt;= x"7135"; -- SCALING_YSC
            when x"11" =&gt; sreg &lt;= x"7211"; -- SCALING_DCWCTR
            when x"12" =&gt; sreg &lt;= x"73f1"; -- SCALING_PCLK_DIV
            when x"13" =&gt; sreg &lt;= x"a202"; -- SCALING_PCLK_DELAY  PCLK scaling = 4, must match COM14
            
            when x"14" =&gt; sreg &lt;= x"1500"; -- COM10 Use HREF not hSYNC
            when x"15" =&gt; sreg &lt;= x"7a20"; -- SLOP
            when x"16" =&gt; sreg &lt;= x"7b10"; -- GAM1
            when x"17" =&gt; sreg &lt;= x"7c1e"; -- GAM2
            when x"18" =&gt; sreg &lt;= x"7d35"; -- GAM3
            when x"19" =&gt; sreg &lt;= x"7e5a"; -- GAM4
            when x"1A" =&gt; sreg &lt;= x"7f69"; -- GAM5
            when x"1B" =&gt; sreg &lt;= x"8076"; -- GAM6
            when x"1C" =&gt; sreg &lt;= x"8180"; -- GAM7
            when x"1D" =&gt; sreg &lt;= x"8288"; -- GAM8
            when x"1E" =&gt; sreg &lt;= x"838f"; -- GAM9
            when x"1F" =&gt; sreg &lt;= x"8496"; -- GAM10
            when x"20" =&gt; sreg &lt;= x"85a3"; -- GAM11
            when x"21" =&gt; sreg &lt;= x"86af"; -- GAM12
            when x"22" =&gt; sreg &lt;= x"87c4"; -- GAM13
            when x"23" =&gt; sreg &lt;= x"88d7"; -- GAM14
            when x"24" =&gt; sreg &lt;= x"89e8"; -- GAM15
            when x"25" =&gt; sreg &lt;= x"13E0"; -- COM8 - AGC, White balance
            when x"26" =&gt; sreg &lt;= x"0000"; -- GAIN AGC 
            when x"27" =&gt; sreg &lt;= x"1000"; -- AECH Exposure
            when x"28" =&gt; sreg &lt;= x"0D40"; -- COMM4 - Window Size
            when x"29" =&gt; sreg &lt;= x"1418"; -- COMM9 AGC 
            when x"2a" =&gt; sreg &lt;= x"a505"; -- AECGMAX banding filter step
            when x"2b" =&gt; sreg &lt;= x"2495"; -- AEW AGC Stable upper limite
            when x"2c" =&gt; sreg &lt;= x"2533"; -- AEB AGC Stable lower limi
            when x"2d" =&gt; sreg &lt;= x"26e3"; -- VPT AGC fast mode limits
            when x"2e" =&gt; sreg &lt;= x"9f78"; -- HRL High reference level
            when x"2f" =&gt; sreg &lt;= x"A068"; -- LRL low reference level
            when x"30" =&gt; sreg &lt;= x"a103"; -- DSPC3 DSP control
            when x"31" =&gt; sreg &lt;= x"A6d8"; -- LPH Lower Prob High
            when x"32" =&gt; sreg &lt;= x"A7d8"; -- UPL Upper Prob Low
            when x"33" =&gt; sreg &lt;= x"A8f0"; -- TPL Total Prob Low
            when x"34" =&gt; sreg &lt;= x"A990"; -- TPH Total Prob High
            when x"35" =&gt; sreg &lt;= x"AA94"; -- NALG AEC Algo select
            when x"36" =&gt; sreg &lt;= x"13E5"; -- COM8 AGC Settings
            when others =&gt; sreg &lt;= x"ffff";
         end case;
      end if;
   end process;
end Behavioral;

</pre>
<h3> <span class="mw-headline" id="i2c_sender.vhd"> i2c_sender.vhd </span></h3>
<p>This module implements an I2C-like protocol used to send register writes out to the camera.
</p>
<pre>----------------------------------------------------------------------------------
-- Engineer: &lt;mfield@concepts.co.nz
-- 
-- Description: Send the commands to the OV7670 over an I2C-like interface
--
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity i2c_sender is
    Port ( clk   : in  STD_LOGIC;    
           siod  : inout  STD_LOGIC;
           sioc  : out  STD_LOGIC;
           taken : out  STD_LOGIC;
           send  : in  STD_LOGIC;
           id    : in  STD_LOGIC_VECTOR (7 downto 0);
           reg   : in  STD_LOGIC_VECTOR (7 downto 0);
           value : in  STD_LOGIC_VECTOR (7 downto 0));
end i2c_sender;

architecture Behavioral of i2c_sender is
   signal   divider  : unsigned (7 downto 0) := "00000001"; -- this value gives a 254 cycle pause before the initial frame is sent
   signal   busy_sr  : std_logic_vector(31 downto 0) := (others =&gt; '0');
   signal   data_sr  : std_logic_vector(31 downto 0) := (others =&gt; '1');
begin
   process(busy_sr, data_sr(31))
   begin
      if busy_sr(11 downto 10) = "10" or 
         busy_sr(20 downto 19) = "10" or 
         busy_sr(29 downto 28) = "10"  then
         siod &lt;= 'Z';
      else
         siod &lt;= data_sr(31);
      end if;
   end process;
   
   process(clk)
   begin
      if rising_edge(clk) then
         taken &lt;= '0';
         if busy_sr(31) = '0' then
            SIOC &lt;= '1';
            if send = '1' then
               if divider = "00000000" then
                  data_sr &lt;= "100" &amp;   id &amp; '0'  &amp;   reg &amp; '0' &amp; value &amp; '0' &amp; "01";
                  busy_sr &lt;= "111" &amp; "111111111" &amp; "111111111" &amp; "111111111" &amp; "11";
                  taken &lt;= '1';
               else
                  divider &lt;= divider+1; -- this only happens on powerup
               end if;
            end if;
         else

            case busy_sr(32-1 downto 32-3) &amp; busy_sr(2 downto 0) is
               when "111"&amp;"111" =&gt; -- start seq #1
                  case divider(7 downto 6) is
                     when "00"   =&gt; SIOC &lt;= '1';
                     when "01"   =&gt; SIOC &lt;= '1';
                     when "10"   =&gt; SIOC &lt;= '1';
                     when others =&gt; SIOC &lt;= '1';
                  end case;
               when "111"&amp;"110" =&gt; -- start seq #2
                  case divider(7 downto 6) is
                     when "00"   =&gt; SIOC &lt;= '1';
                     when "01"   =&gt; SIOC &lt;= '1';
                     when "10"   =&gt; SIOC &lt;= '1';
                     when others =&gt; SIOC &lt;= '1';
                  end case;
               when "111"&amp;"100" =&gt; -- start seq #3
                  case divider(7 downto 6) is
                     when "00"   =&gt; SIOC &lt;= '0';
                     when "01"   =&gt; SIOC &lt;= '0';
                     when "10"   =&gt; SIOC &lt;= '0';
                     when others =&gt; SIOC &lt;= '0';
                  end case;
               when "110"&amp;"000" =&gt; -- end seq #1
                  case divider(7 downto 6) is
                     when "00"   =&gt; SIOC &lt;= '0';
                     when "01"   =&gt; SIOC &lt;= '1';
                     when "10"   =&gt; SIOC &lt;= '1';
                     when others =&gt; SIOC &lt;= '1';
                  end case;
               when "100"&amp;"000" =&gt; -- end seq #2
                  case divider(7 downto 6) is
                     when "00"   =&gt; SIOC &lt;= '1';
                     when "01"   =&gt; SIOC &lt;= '1';
                     when "10"   =&gt; SIOC &lt;= '1';
                     when others =&gt; SIOC &lt;= '1';
                  end case;
               when "000"&amp;"000" =&gt; -- Idle
                  case divider(7 downto 6) is
                     when "00"   =&gt; SIOC &lt;= '1';
                     when "01"   =&gt; SIOC &lt;= '1';
                     when "10"   =&gt; SIOC &lt;= '1';
                     when others =&gt; SIOC &lt;= '1';
                  end case;
               when others      =&gt; 
                  case divider(7 downto 6) is
                     when "00"   =&gt; SIOC &lt;= '0';
                     when "01"   =&gt; SIOC &lt;= '1';
                     when "10"   =&gt; SIOC &lt;= '1';
                     when others =&gt; SIOC &lt;= '0';
                  end case;
            end case;   

            if divider = "11111111" then
               busy_sr &lt;= busy_sr(32-2 downto 0) &amp; '0';
               data_sr &lt;= data_sr(32-2 downto 0) &amp; '1';
               divider &lt;= (others =&gt; '0');
            else
               divider &lt;= divider+1;
            end if;
         end if;
      end if;
   end process;
end Behavioral;

</pre>
<h3> <span class="mw-headline" id="vga.vhd"> vga.vhd </span></h3>
<pre>----------------------------------------------------------------------------------
-- Engineer: Mike Field &lt;hamster@snap.net.nz&gt;
-- 
-- Description: Generate analog 800x600 VGA, double-doublescanned from 19200 bytes of RAM
--
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity vga is
    Port ( 
      clk50       : in  STD_LOGIC;
      vga_red     : out STD_LOGIC_VECTOR(2 downto 0);
      vga_green   : out STD_LOGIC_VECTOR(2 downto 0);
      vga_blue    : out STD_LOGIC_VECTOR(2 downto 1);
      vga_hsync   : out STD_LOGIC;
      vga_vsync   : out STD_LOGIC;
      frame_addr  : out STD_LOGIC_VECTOR(14 downto 0);
      frame_pixel : in  STD_LOGIC_VECTOR(7 downto 0)
    );
end vga;

architecture Behavioral of vga is
   -- Timing constants
   constant hRez       : natural := 800;
   constant vRez       : natural := 600;

   constant hMaxCount  : natural := 1056;
   constant hStartSync : natural := 840;
   constant hEndSync   : natural := 968;
   constant vMaxCount  : natural := 628;
   constant vStartSync : natural := 601;
   constant vEndSync   : natural := 605;
   constant hsync_active : std_logic := '1';
   constant vsync_active : std_logic := '1';

   signal hCounter : unsigned(10 downto 0) := (others =&gt; '0');
   signal vCounter : unsigned(9 downto 0) := (others =&gt; '0');
   signal address : unsigned(16 downto 0) := (others =&gt; '0');
   signal blank : std_logic := '1';

begin
   frame_addr &lt;= std_logic_vector(address(16 downto 2));
   
   process(clk50)
   begin
      if rising_edge(clk50) then
         -- Count the lines and rows      
         if hCounter = hMaxCount-1 then
            hCounter &lt;= (others =&gt; '0');
            if vCounter = vMaxCount-1 then
               vCounter &lt;= (others =&gt; '0');
            else
               vCounter &lt;= vCounter+1;
            end if;
         else
            hCounter &lt;= hCounter+1;
         end if;

         if blank = '0' then
            vga_red   &lt;= frame_pixel(7 downto 5);
            vga_green &lt;= frame_pixel(4 downto 2);
            vga_blue  &lt;= frame_pixel(1 downto 0);
         else
            vga_red   &lt;= (others =&gt; '0');
            vga_green &lt;= (others =&gt; '0');
            vga_blue  &lt;= (others =&gt; '0');
         end if;
   
         if vCounter  &gt;= vRez then
            address &lt;= (others =&gt; '0');
            blank &lt;= '1';
         else 
            if hCounter  &gt;= 80 and hCounter  &lt; 720 then
               blank &lt;= '0';
               if hCounter = 719 then
                  if vCounter(1 downto 0) /= "11" then
                     address &lt;= address - 639;
                  else
                      address &lt;= address+1;
                  end if;
               else
                  address &lt;= address+1;
               end if;
            else
               blank &lt;= '1';
            end if;
         end if;
   
         -- Are we in the hSync pulse? (one has been added to include frame_buffer_latency)
         if hCounter &gt; hStartSync and hCounter &lt;= hEndSync then
            vga_hSync &lt;= hsync_active;
         else
            vga_hSync &lt;= not hsync_active;
         end if;

         -- Are we in the vSync pulse?
         if vCounter &gt;= vStartSync and vCounter &lt; vEndSync then
            vga_vSync &lt;= vsync_active;
         else
            vga_vSync &lt;= not vsync_active;
         end if;
      end if;
   end process;
end Behavioral;

</pre>
<h3> <span class="mw-headline" id="nexys2.ucf"> nexys2.ucf </span></h3>
<pre>NET "clk50" TNM_NET = clk50;
TIMESPEC TS_clk50 = PERIOD "clk50" 20 ns HIGH 50%;
NET "clk50"   LOC = "B8"; # Bank = 0, Pin name = IP_L13P_0/GCLK8, Type = GCLK, Sch name = GCLK0

NET "OV7670_PWDN"  LOC = "L15" | IOSTANDARD=LVTTL | SLEW=SLOW; # JA0
NET "OV7670_RESET" LOC = "K13" | IOSTANDARD=LVTTL | SLEW=SLOW; # JA4
NET "OV7670_D&lt;0&gt;"  LOC = "K12" | IOSTANDARD=LVTTL | SLEW=SLOW; # JA1
NET "OV7670_D&lt;1&gt;"  LOC = "L16" | IOSTANDARD=LVTTL | SLEW=SLOW; # JA5
NET "OV7670_D&lt;2&gt;"  LOC = "L17" | IOSTANDARD=LVTTL | SLEW=SLOW; # JA2
NET "OV7670_D&lt;3&gt;"  LOC = "M14" | IOSTANDARD=LVTTL | SLEW=SLOW; # JA6
NET "OV7670_D&lt;4&gt;"  LOC = "M15" | IOSTANDARD=LVTTL | SLEW=SLOW; # JA3
NET "OV7670_D&lt;5&gt;"  LOC = "M16" | IOSTANDARD=LVTTL | SLEW=SLOW; # JA7
NET "OV7670_D&lt;6&gt;"  LOC = "M13" | IOSTANDARD=LVTTL | SLEW=SLOW; # JB0
NET "OV7670_D&lt;7&gt;"  LOC = "P17" | IOSTANDARD=LVTTL | SLEW=SLOW; # JB4
NET "OV7670_XCLK"  LOC = "R18" | IOSTANDARD=LVTTL | SLEW=SLOW; # JB1
NET "OV7670_PCLK"  LOC = "R16" | IOSTANDARD=LVTTL | SLEW=SLOW; # JB5
NET "OV7670_HREF"  LOC = "R15" | IOSTANDARD=LVTTL | SLEW=SLOW; # JB2
NET "OV7670_VSYNC" LOC = "T18" | IOSTANDARD=LVTTL | SLEW=SLOW; # JB6
NET "OV7670_SIOD"  LOC = "T17" | IOSTANDARD=LVTTL | SLEW=SLOW | PULLUP; # JB3
NET "OV7670_SIOC"  LOC = "U18" | IOSTANDARD=LVTTL | SLEW=SLOW; # JB7
NET "OV7670_PCLK" CLOCK_DEDICATED_ROUTE = FALSE;

NET "Led&lt;0&gt;"  LOC = "J14" | IOSTANDARD=LVTTL ; 
NET "Led&lt;1&gt;"  LOC = "J15" | IOSTANDARD=LVTTL ; 
NET "Led&lt;2&gt;"  LOC = "K15" | IOSTANDARD=LVTTL ; 
NET "Led&lt;3&gt;"  LOC = "K14" | IOSTANDARD=LVTTL ; 
NET "Led&lt;4&gt;"  LOC = "E17" | IOSTANDARD=LVTTL ; 
NET "Led&lt;5&gt;"  LOC = "P15" | IOSTANDARD=LVTTL ; 
NET "Led&lt;6&gt;"  LOC = "F4"  | IOSTANDARD=LVTTL ;  
NET "Led&lt;7&gt;"  LOC = "R4"  | IOSTANDARD=LVTTL ;  

NET "vga_Red&lt;0&gt;"   LOC = "R9";
NET "vga_Red&lt;1&gt;"   LOC = "T8";
NET "vga_Red&lt;2&gt;"   LOC = "R8";
NET "vga_Green&lt;0&gt;" LOC = "N8";
NET "vga_Green&lt;1&gt;" LOC = "P8";
NET "vga_Green&lt;2&gt;" LOC = "P6";
NET "vga_Blue&lt;1&gt;"  LOC = "U5";
NET "vga_Blue&lt;2&gt;"  LOC = "U4";
NET "vga_Hsync"    LOC = "T4";
NET "vga_Vsync"    LOC = "U3";

NET "btn" LOC = "B18";

</pre>
<h3> <span class="mw-headline" id="ov7670_capture.vhd_-_Version_2.0"> ov7670_capture.vhd - Version 2.0 </span></h3>
<p>And here is version 2.0. It captures the signals on the falling edge of the clock. It might get better results for you <b>Please note that this version is set up to capture at 160x120 -- it is not a drop in replacement for the code above.</b>
</p>
<pre>----------------------------------------------------------------------------------
-- Engineer: Mike Field &lt;hamster@snap.net.nz&gt;
-- 
-- Description: Captures the pixels coming from the OV7670 camera and 
--              Stores them in block RAM
--
-- The length of href last controls how often pixels are captive - (2 downto 0) stores
-- one pixel every 4 cycles.
--
-- "line" is used to control how often data is captured. In this case every fourth 
-- line
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity ov7670_capture is
    Port ( pclk  : in   STD_LOGIC;
           vsync : in   STD_LOGIC;
           href  : in   STD_LOGIC;
           d     : in   STD_LOGIC_VECTOR (7 downto 0);
           addr  : out  STD_LOGIC_VECTOR (18 downto 0);
           dout  : out  STD_LOGIC_VECTOR (11 downto 0);
           we    : out  STD_LOGIC);
end ov7670_capture;

architecture Behavioral of ov7670_capture is
   signal d_latch      : std_logic_vector(15 downto 0) := (others =&gt; '0');
   signal address      : STD_LOGIC_VECTOR(18 downto 0) := (others =&gt; '0');
   signal line         : std_logic_vector(1 downto 0)  := (others =&gt; '0');
   signal href_last    : std_logic_vector(6 downto 0)  := (others =&gt; '0');
   signal we_reg       : std_logic := '0';
   signal href_hold    : std_logic := '0';
   signal latched_vsync : STD_LOGIC := '0';
   signal latched_href  : STD_LOGIC := '0';
   signal latched_d     : STD_LOGIC_VECTOR (7 downto 0) := (others =&gt; '0');
begin
   addr &lt;= address;
   we &lt;= we_reg;
   dout    &lt;= d_latch(15 downto 12) &amp; d_latch(10 downto 7) &amp; d_latch(4 downto 1); 
   
capture_process: process(pclk)
   begin
      if rising_edge(pclk) then
         if we_reg = '1' then
            address &lt;= std_logic_vector(unsigned(address)+1);
         end if;

         -- This is a bit tricky href starts a pixel transfer that takes 3 cycles
         --        Input   | state after clock tick   
         --         href   | wr_hold    d_latch           dout                we address  address_next
         -- cycle -1  x    |    xx      xxxxxxxxxxxxxxxx  xxxxxxxxxxxx  x   xxxx     xxxx
         -- cycle 0   1    |    x1      xxxxxxxxRRRRRGGG  xxxxxxxxxxxx  x   xxxx     addr
         -- cycle 1   0    |    10      RRRRRGGGGGGBBBBB  xxxxxxxxxxxx  x   addr     addr
         -- cycle 2   x    |    0x      GGGBBBBBxxxxxxxx  RRRRGGGGBBBB  1   addr     addr+1

         -- detect the rising edge on href - the start of the scan line
         if href_hold = '0' and latched_href = '1' then
            case line is
               when "00"   =&gt; line &lt;= "01";
               when "01"   =&gt; line &lt;= "10";
               when "10"   =&gt; line &lt;= "11";
               when others =&gt; line &lt;= "00";
            end case;
         end if;
         href_hold &lt;= latched_href;
         
         -- capturing the data from the camera, 12-bit RGB
         if latched_href = '1' then
            d_latch &lt;= d_latch( 7 downto 0) &amp; latched_d;
         end if;
         we_reg  &lt;= '0';

         -- Is a new screen about to start (i.e. we have to restart capturing
         if latched_vsync = '1' then 
            address      &lt;= (others =&gt; '0');
            href_last    &lt;= (others =&gt; '0');
            line         &lt;= (others =&gt; '0');
         else
            -- If not, set the write enable whenever we need to capture a pixel
            if href_last(href_last'high) = '1' then
               if line = "10" then
                  we_reg &lt;= '1';
               end if;
               href_last &lt;= (others =&gt; '0');
            else
               href_last &lt;= href_last(href_last'high-1 downto 0) &amp; latched_href;
            end if;
         end if;
      end if;
      if falling_edge(pclk) then
         latched_d     &lt;= d;
         latched_href  &lt;= href;
         latched_vsync &lt;= vsync;
      end if;
   end process;
end Behavioral;


</pre>
<!-- 
NewPP limit report
Preprocessor node count: 118/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key bitnami_mediawiki:pcache:idhash:395-0!1!0!!en!2!edit=0 and timestamp 20140423071002 -->
<div class="printfooter">
Retrieved from "<a href="http://hamsterworks.co.nz/mediawiki/index.php/OV7670_camera">http://hamsterworks.co.nz/mediawiki/index.php/OV7670_camera</a>"</div>
		<div id="catlinks" class="catlinks catlinks-allhidden"></div>		<!-- end content -->
				<div class="visualClear"></div>
	</div>
</div></div>
<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
				 <li id="ca-nstab-main" class="selected"><a href="http://hamsterworks.co.nz/mediawiki/index.php/OV7670_camera" title="View the content page [alt-c]" accesskey="c">Page</a></li>
				 <li id="ca-talk" class="new"><a href="http://hamsterworks.co.nz/mediawiki/index.php?title=Talk:OV7670_camera&action=edit&redlink=1" title="Discussion about the content page [alt-t]" accesskey="t">Discussion</a></li>
				 <li id="ca-viewsource"><a href="http://hamsterworks.co.nz/mediawiki/index.php?title=OV7670_camera&action=edit" title="This page is protected.
You can view its source [alt-e]" accesskey="e">View source</a></li>
				 <li id="ca-history"><a href="http://hamsterworks.co.nz/mediawiki/index.php?title=OV7670_camera&action=history" title="Past revisions of this page [alt-h]" accesskey="h">History</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="http://hamsterworks.co.nz/mediawiki/index.php?title=Special:UserLogin&returnto=OV7670_camera" title="You are encouraged to log in; however, it is not mandatory [alt-o]" accesskey="o">Log in</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(/mediawiki/skins/common/images/hamsterworks.png);" href="http://hamsterworks.co.nz/mediawiki/index.php/Main_Page" title="Visit the main page"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class="generated-sidebar portlet" id="p-navigation">
		<h5>Navigation</h5>
		<div class="pBody">
			<ul>
				<li id="n-mainpage-description"><a href="http://hamsterworks.co.nz/mediawiki/index.php/Main_Page" title="Visit the main page [alt-z]" accesskey="z">Main page</a></li>
				<li id="n-portal"><a href="http://hamsterworks.co.nz/mediawiki/index.php/Hamsterworks_Wiki!:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-currentevents"><a href="http://hamsterworks.co.nz/mediawiki/index.php/Hamsterworks_Wiki!:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-recentchanges"><a href="http://hamsterworks.co.nz/mediawiki/index.php/Special:RecentChanges" title="The list of recent changes in the wiki [alt-r]" accesskey="r">Recent changes</a></li>
				<li id="n-randompage"><a href="http://hamsterworks.co.nz/mediawiki/index.php/Special:Random" title="Load a random page [alt-x]" accesskey="x">Random page</a></li>
				<li id="n-help"><a href="http://hamsterworks.co.nz/mediawiki/index.php/Help:Contents" title="The place to find out">Help</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="http://hamsterworks.co.nz/mediawiki/index.php" id="searchform">
				<input type="hidden" name="title" value="Special:Search">
				<input id="searchInput" title="Search Hamsterworks Wiki!" accesskey="f" type="search" name="search">
				<input type="submit" name="go" class="searchButton" id="searchGoButton" value="Go" title="Go to a page with this exact name if exists">&nbsp;
				<input type="submit" name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search the pages for this text">
			</form>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="http://hamsterworks.co.nz/mediawiki/index.php/Special:WhatLinksHere/OV7670_camera" title="List of all wiki pages that link here [alt-j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="http://hamsterworks.co.nz/mediawiki/index.php/Special:RecentChangesLinked/OV7670_camera" title="Recent changes in pages linked from this page [alt-k]" accesskey="k">Related changes</a></li>
<li id="t-specialpages"><a href="http://hamsterworks.co.nz/mediawiki/index.php/Special:SpecialPages" title="List of all special pages [alt-q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="http://hamsterworks.co.nz/mediawiki/index.php?title=OV7670_camera&printable=yes" rel="alternate" title="Printable version of this page [alt-p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="http://hamsterworks.co.nz/mediawiki/index.php?title=OV7670_camera&oldid=3610" title="Permanent link to this revision of the page">Permanent link</a></li>			</ul>
		</div>
	</div>
</div><!-- end of the left (by default at least) column -->
<div class="visualClear"></div>
<div id="footer">
	<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="./OV7670 camera - Hamsterworks Wiki!_files/poweredby_mediawiki_88x31.png" height="31" width="88" alt="Powered by MediaWiki"></a></div>
	<ul id="f-list">
		<li id="lastmod"> This page was last modified on 28 June 2013, at 10:27.</li>
		<li id="viewcount">This page has been accessed 13,184 times.</li>
		<li id="privacy"><a href="http://hamsterworks.co.nz/mediawiki/index.php/Hamsterworks_Wiki!:Privacy_policy" title="Hamsterworks Wiki!:Privacy policy">Privacy policy</a></li>
		<li id="about"><a href="http://hamsterworks.co.nz/mediawiki/index.php/Hamsterworks_Wiki!:About" title="Hamsterworks Wiki!:About">About Hamsterworks Wiki!</a></li>
		<li id="disclaimer"><a href="http://hamsterworks.co.nz/mediawiki/index.php/Hamsterworks_Wiki!:General_disclaimer" title="Hamsterworks Wiki!:General disclaimer">Disclaimers</a></li>
	</ul>
</div>
</div>

<script>if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served in 0.241 secs. -->
</body></html>